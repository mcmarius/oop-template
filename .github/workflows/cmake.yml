name: C++ CI

on:
  push:
    branches: ['*'] # NOTE: replace/update with appropriate branch name(s)
    tags: ['*']
  pull_request:
    branches: ['*'] # NOTE: replace/update with appropriate branch name(s)
  workflow_dispatch:
    inputs:
      build_type:
        description: Build type
        required: false
        default: 'Debug'
        type: choice
        options:
          - Debug
          - Release
          - RelWithDebInfo
          - MinSizeRel

env:
  BUILD_TYPE: ${{ inputs.build_type || 'Debug' }}
  # NOTE: update executable name if it is changed in CMakeLists.txt
  EXECUTABLE_NAME: "oop"
  INPUT_FILENAME: "tastatura.txt"
  BIN_DIR: "bin"
  BUILD_DIR: "build"
  EXT_DIR: "ext"
  GEN_DIR: "generated"

defaults:
  run:
    # Use a bash shell, so we can use the same syntax for environment variable
    # access regardless of the host operating system
    # https://github.com/saxbophone/CPP20-Cross-Platform-Template
    shell: bash

jobs:
  cppcheck:
    name: "Cppcheck"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run cppcheck
        uses: ./.github/actions/cppcheck

  clang-tidy:
    name: "Clang-Tidy"
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      CLANG_VER: 18
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run clang-tidy
        uses: ./.github/actions/clang-tidy


  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 8
    permissions:
      attestations: write
      contents: write
      id-token: write

    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}

      # NOTE: replace with another version if this one does not work
      # For more versions, see https://winlibs.com or
      # https://github.com/brechtsanders/winlibs_mingw/releases/
      MINGW_VER: "13.3.0posix-11.0.1-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-13.3.0-mingw-w64msvcrt-11.0.1-r1.7z"
      # Example:
      # MINGW_VER: "13.3.0posix-11.0.1-ucrt-r1/winlibs-x86_64-posix-seh-gcc-13.3.0-mingw-w64ucrt-11.0.1-r1.7z"
      # MINGW_VER: "14.1.0posix-18.1.7-12.0.0-ucrt-r2/winlibs-x86_64-posix-seh-gcc-14.1.0-mingw-w64ucrt-12.0.0-r2.7z"
      # MINGW_VER: "14.1.0posix-18.1.7-12.0.0-msvcrt-r2/winlibs-x86_64-posix-seh-gcc-14.1.0-mingw-w64msvcrt-12.0.0-r2.7z"


    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            c: clang-18
            cxx: clang++-18
            clang_ver: "18"
            clang_ver_full: "18.1.8"
            name: "MSan: Ubuntu 22.04 Clang 18"
            cmake_flags: "-DUSE_MSAN=ON"
            cmake_generator: Ninja
            # This env runs memory sanitizers
            runs_msan: true

          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "ASan: Ubuntu 22.04 GCC 12"
            cmake_flags: "-DUSE_ASAN=ON"
            cmake_generator: Ninja
            # This env runs address sanitizers
            runs_asan: true
            # this is used to add a suffix to the archive name since we use the same compiler version
            asan_name: "-asan"

          - os: ubuntu-22.04
            c: gcc-12
            cxx: g++-12
            name: "Valgrind: Ubuntu 22.04 GCC 12"
            # cmake_flags:
            cmake_generator: Ninja
            # This env runs valgrind
            runs_valgrind: true

          - os: macos-12
            c: clang
            cxx: clang++
            name: "ASan: macOS 12 Apple Clang 14"
            cmake_flags: "-DUSE_ASAN=ON"
            # cmake_generator:
            # This env runs address sanitizers
            runs_asan: true

          - os: macos-12
            c: gcc-12
            cxx: g++-12
            name: "macOS 12 GCC 12"
            # cmake_flags:
            # cmake_generator: Ninja

          - os: windows-2022
            c: cl
            cxx: cl
            name: "ASan: Windows 2022 MSVC 19.40"
            cmake_flags: "-DUSE_ASAN=ON"
            # cmake_generator: Ninja
            # This env runs address sanitizers
            runs_asan: true

          - os: windows-2022
            c: gcc
            cxx: g++
            name: "Windows 2022 MinGW GCC 13"
            # cmake_flags:
            cmake_generator: Ninja

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare env
        run: |
          echo ${GITHUB_WORKSPACE}
          mkdir ${GITHUB_WORKSPACE}/artifacts

      - name: Set timestamp and zip name
        run: |
          echo "TIMESTAMP=$(date +%Y-%m-%d-%H-%M-%S)" >> ${GITHUB_ENV}

          # use the full name as prefix: {user_name}_{repo_name} (replace / with _)
          echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ env.BUILD_TYPE }}_${{ matrix.os }}_${{ matrix.cxx }}${{ matrix.asan_name }}" | sed 's|/|_|')" >> ${GITHUB_ENV}

          # or use only the repo name (github does not have a predefined environment variable for this)
          # the regex splits by / and keeps everything after / without the / character
          # echo "ZIP_NAME=$(echo "${GITHUB_REPOSITORY}_${{ env.BUILD_TYPE }}_${{ matrix.os }}_${{ matrix.cxx }}${{ matrix.asan_name }}" | sed -E 's|.+/(.+)|\1|')" >> ${GITHUB_ENV}

      # Common Linux dependencies
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          # https://github.com/llvm/llvm-project/issues/78354
          sudo sysctl vm.mmap_rnd_bits=28

      # Also see https://github.com/actions/runner-images/discussions/9446#discussioncomment-8668538
      - name: Install Clang ${{ matrix.clang_ver }}
        if: runner.os == 'Linux' && matrix.runs_msan == true
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh ${{ matrix.clang_ver }}

      - name: Install libc++ (Linux Clang ${{ matrix.clang_ver }})
        if: runner.os == 'Linux' && matrix.runs_msan == true
        run: |
          # sudo apt-get update
          sudo apt-get install --no-install-recommends libc++-${{ matrix.clang_ver }}-dev libc++abi-${{ matrix.clang_ver }}-dev

      - name: Install ninja (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja

      - name: Install valgrind
        if: runner.os == 'Linux' && matrix.runs_valgrind == true
        run: |
          # sudo apt-get update
          sudo apt-get install --no-install-recommends valgrind

      - name: Cache tools
        uses: actions/cache@v4
        if: runner.os == 'Linux' && matrix.runs_msan == true
        id: cache-tools
        with:
          path: tools
          key: tools-clang-${{ matrix.clang_ver }}-stdlib-msan

      - name: Configure CMake
        uses: ./.github/actions/configure-cmake
        with:
          custom_flags: ${{ matrix.cmake_flags }}
          warnings_as_errors: 'ON'

      - name: Build
        # Execute the build using N jobs (-jN)
        run: cmake --build "${BUILD_DIR}" --config ${BUILD_TYPE} -j6

      - name: Install
        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
        run: cmake --install "${BUILD_DIR}" --config ${BUILD_TYPE} --prefix artifacts

      - name: Move artifacts
        run: |
          mkdir ${{ env.ZIP_NAME }}
          mv artifacts/${{ env.BIN_DIR }}/* ${{ env.ZIP_NAME }}
          ls -la ${{ env.ZIP_NAME }}

      - name: Patch macOS launcher
        if: runner.os == 'macOS'
        run: |
          sed -i '' -e "s/oop/${EXECUTABLE_NAME}/" "${{ env.ZIP_NAME }}/launcher.command"
          chmod +x "${{ env.ZIP_NAME }}/launcher.command"

      - name: Copy missing dylibs
        if: runner.os == 'macOS' && matrix.cxx == 'clang++'
        run: |
          if [[ "${BUILD_TYPE}" =~ "Deb" ]]; then
            mkdir lib
            cp /Library/Developer/CommandLineTools/usr/lib/clang/14.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib lib
            install_name_tool -change @rpath/libclang_rt.asan_osx_dynamic.dylib @executable_path/lib/libclang_rt.asan_osx_dynamic.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
            mv lib ${{ env.ZIP_NAME }}/
          fi

      - name: Copy missing dylibs (g++)
        if: runner.os == 'macOS' && startsWith(matrix.cxx, 'g++')
        run: |
          mkdir lib
          cp /usr/local/opt/gcc@12/lib/gcc/12/libstdc++.6.dylib /usr/local/opt/gcc@12/lib/gcc/12/libgcc_s.1.1.dylib lib
          install_name_tool -change /usr/local/opt/gcc@12/lib/gcc/12/libstdc++.6.dylib @executable_path/lib/libstdc++.6.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
          install_name_tool -change /usr/local/opt/gcc@12/lib/gcc/12/libgcc_s.1.1.dylib @executable_path/lib/libgcc_s.1.1.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
          mv lib ${{ env.ZIP_NAME }}/

      - name: Copy missing dlls
        if: runner.os == 'Windows' && matrix.cxx == 'cl'
        run: |
          if [[ "${BUILD_TYPE}" =~ "Deb" ]]; then
            # runtime debug DLLs
            cp "$(which ucrtbased.dll)" \
               "$(which VCRUNTIME140_1D.dll)" \
               "$(which MSVCP140D.dll)" \
               "$(which VCRUNTIME140D.dll)" \
               ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}

            # sanitizers DLLs
            vcver=$(cat "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/Microsoft.VCToolsVersion.default.txt")
            vcbindir="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/${vcver}/bin/Hostx64/x64/"
            cp "${vcbindir}/clang_rt.asan_dynamic-x86_64.dll" \
               "${vcbindir}/clang_rt.asan_dbg_dynamic-x86_64.dll" \
               ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
          fi

          # runtime release DLLs
          if [[ "${BUILD_TYPE}" =~ "Rel" ]]; then
            cp "$(which ucrtbase.dll)" \
               "$(which VCRUNTIME140_1.dll)" \
               "$(which MSVCP140.dll)" \
               "$(which VCRUNTIME140.dll)" \
               ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
          fi

      - name: Copy stdlib (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        # static linking might not work with MinGW, might be easier this way
        run: |
          cp gcc/mingw64/bin/libstdc++-6.dll \
            gcc/mingw64/bin/libgcc_s_seh-1.dll \
            gcc/mingw64/bin/libwinpthread-1.dll \
            ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}_${{ env.TIMESTAMP }}
          path: ${{ env.ZIP_NAME }}
          retention-days: 30

      - name: Setup memory sanitizer
        if: runner.os == 'Linux' && matrix.runs_msan == true && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          mkdir -p tools
          cd tools
          git clone --depth=1 --branch=llvmorg-${{ matrix.clang_ver_full }} https://github.com/llvm/llvm-project
          cd llvm-project
          # mkdir build; cd build
          sudo ln -s -f /usr/bin/$CC /usr/bin/clang
          sudo ln -s -f /usr/bin/$CXX /usr/bin/clang++
          # https://github.com/llvm/llvm-project/issues/78354
          sudo sysctl vm.mmap_rnd_bits=28
          cmake -G Ninja -S runtimes -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLVM_USE_SANITIZER=MemoryWithOrigins \
            -DCMAKE_BUILD_WITH_INSTALL_RPATH=true
          cmake --build build -j6 -- cxx cxxabi

      - name: Sanitizers
        # run one sanitizer for each env to avoid building extra binaries on one env
        if: (matrix.runs_asan == true || matrix.runs_msan == true) && runner.os != 'Windows'
        # detect_leaks is not supported on macOS
        # env:
        #   ASAN_OPTIONS: detect_leaks=1
        run: |
          cat "${INPUT_FILENAME}" | tr -d '\r' | ./${{ env.ZIP_NAME }}/"${EXECUTABLE_NAME}"

      - name: Sanitizers (Windows MSVC)
        # run one sanitizer for each OS to avoid building extra binaries
        if: matrix.cxx == 'cl' && matrix.runs_asan == true
        continue-on-error: true
        run: |
          cat "${INPUT_FILENAME}" | ./${{ env.ZIP_NAME }}/"${EXECUTABLE_NAME}".exe

      - name: Valgrind
        if: runner.os == 'Linux' && matrix.runs_valgrind == true
        run: |
          # remove --show-leak-kinds=all (and --track-origins=yes) if there are many leaks in external libs
          cat "${INPUT_FILENAME}" | tr -d '\r' | valgrind \
              --leak-check=full --show-leak-kinds=all --track-origins=yes \
              --error-exitcode=1 \
              ./${{ env.ZIP_NAME }}/"${EXECUTABLE_NAME}"

      - name: Set Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        # trim prefix from ref to get tag name
        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> ${GITHUB_ENV}

      - name: Add tag to folder name
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mv ${{ env.ZIP_NAME }} ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          type: 'zip'
          path: ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}
          filename: ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}.zip

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          subject-path: ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}.zip

      - name: Release
        uses: softprops/action-gh-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ env.ZIP_NAME }}_${{ env.TAG_NAME }}.zip
